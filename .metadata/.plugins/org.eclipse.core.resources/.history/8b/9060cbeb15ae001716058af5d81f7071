import java.util.ArrayList;

public class TreeConstructor {
	
//	INSTANCE VARIABLES
	
	
//	PUBLIC CONSTRUCTORS
	
//	h = height
//	b = branching factor
//	a = approximately
	public TreeConstructor(int h, int b, int a, Node node) {
//		if interior node
		if (h > 1) {
//			t set to random value between -2500 and 2500
			int t = (int)(Math.random()*5000-2500+1);
//			e is t + value between -approx and approx
			int error = (int)(Math.random()*a*2-a);
//			set root node
			node.setE(t+error);
			
			createDaughters(h,b,a,node);
		}
//		if leaf node
		if (h == 1) {
//			t set to random value between -2500 and 2500
			int t = (int)(Math.random()*5000-2500);
//			set root node
			node.setE(t);
		}
	}
	
//	h = height
//	b = branching factor
//	a = approximately
//	t = true value
	public TreeConstructor(int h, int b, int a, int t, Node node) {
//		if interior node
		if (h > 1) {
//			t set to random value between -2500 and 2500
			int t = (int)(Math.random()*5000-2500);
//			e is t + value between -approx and approx
			int error = (int)(Math.random()*a*2-a);
//			create root node
			root = new Node(t+error);
			
//			create daughters
		}
//		if leaf node
		if (h == 1) {
//			t set to random value between -2500 and 2500
			int t = (int)(Math.random()*5000-2500);
//			create root node
			root = new Node(t);
		}
	}
	
	public void createDaughters(int h, int b, int a, Node node) {
//		calc branches
		int bVar = (int)(Math.random()*100+1);
		int numDaughters = b;
		if (bVar <= 5) {
			numDaughters--;
		} else if (bVar <= 10) {
			numDaughters++;
		}
//		choose random daughter
		int randDaughterIndex = (int)(Math.random()*numDaughters);
//		create numDaughters daughters
		for(int i=numDaughters;i>0;i--) {
			int newT;
			if (i==randDaughterIndex) {
				newT = -1*t;
			} else {
				newT = 0;
			}
			Node daughter = new Node();
			node.addDaughter(daughter);
			TreeConstructor branch = new TreeConstructor(h-1,b,a,newT,daughter);
		}
	}
}
